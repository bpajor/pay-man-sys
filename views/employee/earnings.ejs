<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/employee/earnings/styles.css" />
    <link rel="stylesheet" href="/css/common/left-dashboard-nav.css" />
    <link rel="stylesheet" href="/css/common/header.css" />
    <link rel="stylesheet" href="/css/common/footer.css" />
    <link rel="stylesheet" href="/css/common/date-picker.css">
    <script nonce="<%= nonce %>" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title>Employee Dashboard</title>
    <style>
      /* Stylizacja boxów z komunikatami */
      .error-message-box {
        background-color: #fffbea; /* Lekko żółty kolor tła */
        border: 2px solid black; /* Czarny border */
        padding: 15px;
        border-radius: 5px;
        font-size: 16px;
        color: black;
        text-align: center;
        font-weight: bold;
      }

      /* Komunikat w wykresach */
      .chart-error {
        color: red;
        font-size: 14px;
        text-align: center;
        margin-top: 10px;
      }
    </style>
  </head>
  <body>
    <%- include("../includes/header", {baseUrl, loggedUser, accountType}) %>
    <main>
      <%- include("../includes/left-dashboard-nav.ejs", {baseUrl, accountType, jrequestsPending}) %>
      <section class="content">
        <div class="date-picker">
          <span class="date-prev">&#9664;</span>
          <span class="date-text" id="date-text">01 January - 31 January <span id="currentYear"></span></span>
          <span class="date-next">&#9654;</span>
        </div>
        <section class="summary-cards">
          <div class="payroll-card">
            <div class="payroll-title">Gross pay</div>
            <div class="error-message-box" id="currentMonthSalary">Data is not available</div> <!-- Komunikat z boxem -->
          </div>
          <div class="payroll-card">
            <div class="payroll-title">Net Pay</div>
            <div class="error-message-box" id="netPay">Data is not available</div> <!-- Komunikat z boxem -->
          </div>
        </section>
        <section class="charts">
          <div class="chart-card">
            <div class="chart-title">Payroll Cost Overview</div>
            <a href="">See details</a>
            <canvas id="payrollChart"></canvas>
            <div class="error-message-box" id="payrollChartError" style="display: none;">Data is not available</div> <!-- Komunikat w wykresie -->
          </div>
          <div class="card">
            <h2>Salary Breakdown</h2>
            <canvas id="salaryChart"></canvas>
            <br />
            <br />
            <div class="error-message-box" id="totalNetPay">Data is not available</div> <!-- Komunikat z boxem -->
          </div>
        </section>
        <div id="errorMessage" class="chart-error" style="display: none;">Data is not available</div> <!-- Błąd wyświetlany tutaj -->
      </section>
    </main>
    <footer>
      <p>© 2024 PayrollPro. All rights reserved.</p>
    </footer>
  </body>

  <script nonce="<%= nonce %>">
    let currentYear = new Date().getFullYear();
    let currentIndex = new Date().getMonth();  // Obecny miesiąc (0 = styczeń, 11 = grudzień)
    let earningsData = [];
    
    document.getElementById('currentYear').textContent = currentYear;

    // Fetch earnings data from API
    async function fetchEarnings(year) {
      try {
        const response = await fetch(`/api/employee/earnings?year=${year}`);
        if (!response.ok) {
          throw new Error('Failed to fetch data');
        }
        earningsData = await response.json();
        updateUI();
        document.getElementById('payrollChartError').style.display = 'none'; // Ukryj komunikat o błędzie
      } catch (error) {
        console.error('Error fetching earnings data:', error);
        displayErrorMessage(); // Wyświetl błąd w interfejsie
      }
    }

    // Display error message in UI
    function displayErrorMessage() {
      document.getElementById('currentMonthSalary').textContent = "Data is not available";
      document.getElementById('netPay').textContent = "Data is not available";
      document.getElementById('totalNetPay').textContent = "Data is not available";
      document.getElementById('payrollChartError').style.display = 'block'; // Pokaż komunikat w wykresie
    }

    // Calculate net pay and update UI
    function calculateNetPay(salary, contributions) {
      const totalContributions = contributions.retirement_contributions + contributions.disability_contributions + contributions.healthcare_contributions + contributions.income_tax;
      return salary - totalContributions - contributions.bonus;
    }

    // Update UI elements based on fetched earnings data
    function updateUI() {
      const currentMonthData = earningsData[currentIndex];
      if (currentMonthData) {
        const totalSalary = currentMonthData.total_salary || 0;
        const netPay = calculateNetPay(totalSalary, currentMonthData);
        document.getElementById('currentMonthSalary').textContent = `$${totalSalary.toFixed(2)}`;
        document.getElementById('netPay').textContent = `$${netPay.toFixed(2)}`;

        // Update chart data
        const labels = earningsData.map(item => item.month_name);
        const salaryData = earningsData.map(item => item.total_salary);
        payrollChart.data.labels = labels;
        payrollChart.data.datasets[0].data = salaryData;
        payrollChart.update();

        // Update pie chart for salary breakdown
        updateSalaryBreakdownChart(currentMonthData);
      }
    }

    // Function to update the pie chart (salary breakdown)
    function updateSalaryBreakdownChart(data) {
      const chartData = [
        data.retirement_contributions,
        data.disability_contributions,
        data.healthcare_contributions,
        data.income_tax,
        data.bonus,
        calculateNetPay(data.total_salary, data)
      ];

      salaryChart.data.datasets[0].data = chartData;
      salaryChart.update();

      // Update net pay display
      document.getElementById('totalNetPay').textContent = `${data.total_salary.toFixed(2)} $`;
    }

    // Date navigation logic
    const dateRanges = [
      "01 January - 31 January",
      "01 February - 29 February",
      "01 March - 31 March",
      "01 April - 30 April",
      "01 May - 31 May",
      "01 June - 30 June",
      "01 July - 31 July",
      "01 August - 31 August",
      "01 September - 30 September",
      "01 October - 31 October",
      "01 November - 30 November",
      "01 December - 31 December",
    ];

    function updateDateText() {
      const dateText = document.getElementById("date-text");
      dateText.textContent = `${dateRanges[currentIndex]} ${currentYear}`;
    }

    function prevMonth() {
      if (currentIndex > 0) {
        currentIndex--;
        updateDateText();
        updateUI();
      }
    }

    function nextMonth() {
      if (currentIndex < dateRanges.length - 1) {
        currentIndex++;
        updateDateText();
        updateUI();
      }
    }

    document.querySelector(".date-prev").addEventListener("click", prevMonth);
    document.querySelector(".date-next").addEventListener("click", nextMonth);

    // Bar chart setup
    const ctx = document.getElementById("payrollChart").getContext("2d");
    const payrollChart = new Chart(ctx, {
      type: "bar",
      data: {
        labels: [],
        datasets: [
          {
            label: "Total Salary",
            data: [],
            backgroundColor: "rgba(75, 192, 192, 0.2)",
            borderColor: "rgba(75, 192, 192, 1)",
            borderWidth: 1,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });

    // Pie chart setup for salary breakdown
    const salaryCtx = document.getElementById("salaryChart").getContext("2d");
    const salaryChart = new Chart(salaryCtx, {
      type: "pie",
      data: {
        labels: [
          "Retirement Contribution",
          "Disability Contribution",
          "Healthcare Contribution",
          "Income Tax",
          "Bonus",
          "Net Pay",
        ],
        datasets: [
          {
            data: [0, 0, 0, 0, 0, 0], // Initial empty data
            backgroundColor: [
              "#FF6384",
              "#36A2EB",
              "#FFCE56",
              "#4BC0C0",
              "#9966FF",
              "#FF9F40",
            ],
            hoverBackgroundColor: [
              "#FF6384",
              "#36A2EB",
              "#FFCE56",
              "#4BC0C0",
              "#9966FF",
              "#FF9F40",
            ],
          },
        ],
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: "top",
          },
          tooltip: {
            callbacks: {
              label: function (context) {
                let label = context.label || "";
                if (label) {
                  label += ": ";
                }
                if (context.parsed !== null) {
                  label += new Intl.NumberFormat("pl-PL", {
                    style: "currency",
                    currency: "USD",
                  }).format(context.parsed);
                }
                return label;
              },
            },
          },
        },
      },
    });

    // Fetch data on page load
    document.addEventListener("DOMContentLoaded", function () {
      updateDateText();  // Update date to reflect current month
      fetchEarnings(currentYear);  // Fetch earnings for the current year
    });
  </script>
</html>
